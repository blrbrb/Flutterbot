/**
 * ## Fluttershy's LockBox.
 * ### author: [EllyPony]({@link EllyPonyUrl})
 *
 * #### @classdesc Helper class for the secure encryption and decryption of data. Mostly, for the
 * secure storage of client secrets / other confidential potentially discriminating data.
 *
 * #### @summary **on construction the class automatically creates a new stationary key, and checks for any .env files in the working directory whereupon
 * `ENCRYPTION_KEY=` is appended to the file**. If no enviornment variable files are found, a new blank .env file is created. **It is crucial that this
 * stationary key remain unchanged**. As all encrpytions will use a variation of buffers generated by the stationary key as a seed when ciphering. If the stationary key is lost
 * all data written with your old stationary key will be lost forever.
 *
 * For "permanent" to skip over initailizing the enviornment variable, and obsfucate something "permanantly" (you won't be able to read it again)
 * use {@link encrypt_forgetKey} to generate a unique one-time 16bit seed for the {@link crypto.createCipheriv()},
 *
 * */
 declare class LockBox {
    /**
     * stationary cipher key, stored as an env variable.
     * @memberof LockBox
     */
    stationaryKey: string | undefined;
    /**
     * Creates an instance of the LockBox
     * @constructor
     * @memberof LockBox
     */
    constructor();
    /**
     * encrypt data
     *
     * @param {any} [data]
     * @memberof LockBox
     */
    encrypt(data: any): string;
    /**
     * Same as {@link encrypt}, but the key used for the encryption is immediately destroyed.
     * rendering whatever data it has encrypted permanent scrambled. (prob wont work, haven't tested)
     * @param {any} data
     * @memberof LockBox
     * @returns {any} permanentley encrypted data
     */
    encrypt_forgetKey(data: any): string;
    /**
     * decrypt data that has previously been {@link encrypt}ed
     * @memberof LockBox
     * @param {string} [data]
     * @return {any}
     */
    decrypt(data: string): any;
    _generateKey(): any;
    _initEnv(): void;
    _newTimestamp(): string;
}
export default LockBox;
