import { Log, findFiles } from "./utilities";

import fs from 'fs';
import crypto from "node:crypto"

export class LockBox 
{
   
   /**
    * Fluttershy's lockbox.   
    * @summary Helper class for the secure encryption and decryption of data. Mostly, for the 
    * secure storage of client secrets / other confidential potentially discriminating data.
    * 
    * Upon creation the class automatically creates a new stationary key, and checks for any .env files in the working directory whereupon 
    * `ENCRYPTION_KEY=` is appended to the file. If no enviornment variable files are found, a new blank .env file is created. It is crucial that this 
    * stationary key remain unchanged. As all encrpytions will use a variation of buffers generated by the stationary key as a seed when ciphering. If the stationary key is lost
    * all data written with your old stationary key will be lost forever.
    * 
    * For "permanent" to skip over initailizing the enviornment variable, and obsfucate something "permanantly" (you won't be able to read it again)
    * use {@link encrypt_forgetKey} to generate a unique one-time 16bit seed for the {@link crypto.createCipheriv()}, 
    *
    * @constructor
    */
   stationaryKey: string | undefined; 
   constructor() {
   
    let initalize = process.env.ENCRYPTION_KEY ? false : true; 
    if(initalize)
    {
        this._initEnv()
    } 
  }
  /**
   * encrypt data 
   * @param {any} data
   * @returns {string}
   */
  encrypt(data:any):string {
     // I got all of this off of google lol idk wtf crypto does 
    let timestamp =this._newTimestamp(); 
    const key = crypto.createHash('sha256').update(this.stationaryKey + timestamp).digest('hex');
    const iv = crypto.randomBytes(16); // Apparently this needs to be unique, every time. whoops. Had it in the constructor 
    const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key, 'hex'), iv);
   
    let encryptedData = cipher.update(data, 'utf8', 'base64');
    encryptedData += cipher.final('base64');

    // Return the timestamp + encrypted data
    return `${timestamp}:${iv.toString('hex')}:${encryptedData}`;
  }
  
  /**
   * Same as encrypt(), but the key used for the encryption is immediately destroyed. 
   * rendering whatever data it has encrypted permanent scrambled. (prob wont work, haven't tested)
   * @param {any} data
   
   * @returns {any} permanentley encrypted data 
   */
  encrypt_forgetKey(data:any):string
  { const iv = crypto.randomBytes(16); 
    const cipher = crypto.createCipheriv('aes-256-cbc', crypto.randomBytes(32), Buffer.from(iv.toString(), 'hex'));
    let encryptedToken = cipher.update(data, 'utf-8', 'hex');
    encryptedToken += cipher.final('hex');
    return encryptedToken;
  }
  
  /**
   * decrypt data
   * @param {string} data
   * @returns {any} decrypted data
   */
  decrypt(data:string): any {
    
  const [timestamp, ivHex, encryptedText] = data.split(':');
  const key = crypto.createHash('sha256').update(this.stationaryKey + timestamp).digest('hex');
  const iv = Buffer.from(ivHex, 'hex');
  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key, 'hex'), iv);
  
  let decryptedData = decipher.update(encryptedText, 'base64', 'utf8');
  decryptedData += decipher.final('utf8');
  
  return decryptedData;
    
  }

  /**
   * Description placeholder
   * @date 10/13/2023 - 5:04:02 AM
   *
   * @returns {*}
   */
  _generateKey(): any {
    let Key = crypto.randomBytes(32).toString('hex');
    return Key;
  }

 
  /**
   * initalize the stationary key as an enviornment variable,
   * if it doesn't already exist.
   */
  _initEnv() {

    // Generate a new encryption key
    const Key = this._generateKey();
  
    const envKey = `
      ENCRYPTION_KEY=${Key}
    `;
   
    let envFiles = findFiles('','./','.env');  //find custom env files
    if(!envFiles){
     Log('yellow, bold', 'WARN: Unable to find an enviornment (.env) file. Creating a new one in the working directory');
     fs.writeFileSync(".env", envKey, { flag: 'a' });}
    else{
     fs.writeFileSync(envFiles[0], envKey, { flag: 'a' }); 
     Log('created new key and updated .env file');}

  }

  
  /**
   * returns a string representing unix time at the current moment.
   *
   *
   * @returns {string}
   */
  _newTimestamp(): string
  {
    return Date.now().toString();
  }
}

export default LockBox